from telegram import InlineKeyboardButton, InlineKeyboardMarkup

from telegram.ext import (
    CallbackContext, ConversationHandler, Updater,
    MessageHandler, CallbackQueryHandler, Filters,
    CommandHandler)

from accounts.models import User
from classrooms.models import Schedule
from courses.models import Course
from telegrambot.models import BotAnswer

from classrooms.services import StudentService, ClassroomService

from telegrambot.handlers.login_handler import LoginHandler

from telegram import Update
from telegram import ParseMode

from django.utils import dateformat

import telegram


class StudentHandler:
    """
    –ö–ª–∞—Å—Å —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å—Ç—É–¥–µ–Ω—Ç–∞
    """

    HOMEWORK_URL = range(1)

    @staticmethod
    def _send_courses_list(update: Update.callback_query):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç—É –∫—É—Ä—Å—ã –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –æ–Ω —É—á–∏—Ç—Å—è
        """

        user = User.objects.get(telegram_id=update.message.chat_id)
        user_courses = StudentService.get_student_courses(user)

        if not user_courses:
            update.message.reply_text('–¢—ã –µ—â–µ –Ω–∞ –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ –∫—É—Ä—Å—ã üò¢')
            return

        reply_markup = InlineKeyboardMarkup.from_column(
            [InlineKeyboardButton(
                i.get('course__title'), callback_data=f"ModulesList {i.get('course_id')}"
            ) for i in user_courses]
        )

        update.message.reply_text('–°–ø–∏—Å–æ–∫ —Ç–≤–æ–∏—Ö –∫—É—Ä—Å–æ–≤ üìù', reply_markup=reply_markup)

    @staticmethod
    def _send_modules_list(update: Update.callback_query, course_id):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç—É –º–æ–¥—É–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫—É—Ä—Å–∞
        """

        course = Course.objects.get(id=course_id)

        reply_markup = InlineKeyboardMarkup.from_column(
            [InlineKeyboardButton(
                module.title, callback_data=f'LessonsList {module.id} {course_id}'
            ) for module in course.modules.all()] + [InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚è™', callback_data='CoursesList')]
        )

        update.message.reply_text('–ú–æ–¥—É–ª–∏ –≤ —ç—Ç–æ–º –∫—É—Ä—Å–µ üìù', reply_markup=reply_markup)

    @staticmethod
    def _send_lessons_list(update: Update.callback_query, module_id, course_id):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç—É —É—Ä–æ–∫–∏ –∏–∑ –µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        """

        user = User.objects.get(telegram_id=update.message.chat_id)
        user_lessons = StudentService.get_student_lessons(user, module_id, course_id)

        back_button = [InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚è™', callback_data=f'ModulesList {course_id}')]

        if not user_lessons:
            reply_markup = InlineKeyboardMarkup.from_column(back_button)
            update.message.reply_text('–£ —Ç–µ–±—è –µ—â–µ –Ω–µ –±—ã–ª–æ —É—Ä–æ–∫–æ–≤ –ø–æ —ç—Ç–æ–º—É –º–æ–¥—É–ª—é üò¢', reply_markup=reply_markup)
            return

        reply_markup = InlineKeyboardMarkup.from_column(
            [InlineKeyboardButton(
                i.get('lesson__title'), callback_data=f"LessonsView {i.get('id')} lessons_list"
            ) for i in user_lessons] + back_button
        )

        update.message.reply_text('–ü—Ä–æ—à–µ–¥—à–∏–µ —É—Ä–æ–∫–∏ üìö', reply_markup=reply_markup)

    @staticmethod
    def _send_lessons_info(update: Update.callback_query, schedule_id, back_location):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç—É –≤—ã–±—Ä–∞–Ω–Ω—ã–π —É—Ä–æ–∫ (–º–∞—Ç–µ—Ä–∏–∞–ª—ã, —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏—è)
        """

        user = User.objects.get(telegram_id=update.message.chat_id)
        schedule = Schedule.objects.get(id=schedule_id)

        schedule_title = schedule.lesson.title.replace('.', '\.').replace('-', '\-')
        hw_status = '–ù–µ —Å–¥–∞–Ω–æ'

        message = f"*–£—Ä–æ–∫:* _{schedule_title}_\n"

        keyboard = [InlineKeyboardButton('–ú–∞—Ç–µ—Ä–∏–∞–ª—ã —É—Ä–æ–∫–∞ üìí', url=schedule.lesson.document_url)]

        if schedule.homeworks.filter(student=user).exists():
            homework = schedule.homeworks.get(student=user)

            if homework.is_accepted:
                hw_status = '–ó–∞—á—Ç–µ–Ω–æ'
            elif homework.need_to_fix:
                hw_status = '–î–æ—Ä–∞–±–æ—Ç–∞—Ç—å'
                keyboard.append(InlineKeyboardButton('–ò—Å–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ üìÑ', callback_data=f'HomeworksSend {schedule.id}'))
            else:
                hw_status = '–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ'
                keyboard.append(InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É üîó', callback_data=f'HomeworksSend {schedule.id}'))
        else:
            keyboard.append(InlineKeyboardButton('–°–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ üìÑ', callback_data=f'HomeworksSend {schedule.id}'))

        message += f'*–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ:* _{hw_status}_'

        callback_data = 'HomeworksList'

        if back_location == 'lessons_list':
            callback_data = f'LessonsList {schedule.lesson.module_id} {schedule.classroom.course_id}'

        keyboard.append(InlineKeyboardButton(text='–ù–∞–∑–∞–¥ ‚è™', callback_data=callback_data))

        reply_markup = InlineKeyboardMarkup.from_column(keyboard)
        update.message.reply_markdown_v2(message, reply_markup=reply_markup)

    @staticmethod
    def _send_homeworks_list(update: Update.callback_query):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç—É —É—Ä–æ–∫–∏, —Ç—Ä–µ–±—É—é—â–∏–µ —Å–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ –∏–∑ –µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        """

        user = User.objects.get(telegram_id=update.message.chat_id)
        user_lessons = StudentService.get_student_lessons(user, wait_homework=True)

        if not user_lessons:
            update.message.reply_text('–ù–µ—Ç –∑–∞–¥–∞–Ω–∏–π —Ç—Ä–µ–±—É—é—â–∏—Ö —Å–¥–∞—á–∏ ü•∞')
            return

        reply_markup = InlineKeyboardMarkup.from_column(
            [InlineKeyboardButton(
                i.get('lesson__title'), callback_data=f"LessonsView {i.get('id')} homeworks_list"
            ) for i in user_lessons]
        )

        update.message.reply_text('–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –∫ —ç—Ç–∏–º —É—Ä–æ–∫–∞–º –º–æ–∂–Ω–æ —Å–¥–∞—Ç—å üìö', reply_markup=reply_markup)

    @staticmethod
    def _send_student_schedule(update: Update):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç—É –µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        """

        user = User.objects.get(telegram_id=update.message.chat_id)
        schedule = ClassroomService.get_user_schedule(user, 7)

        if not schedule:
            update.message.reply_text('–ë–ª–∏–∂–∞–π—à–∏—Ö –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç ü•∞')
            return

        message = '–¢–≤–æ–∏ –±–ª–∏–∂–∞–π—à–∏–µ –∑–∞–Ω—è—Ç–∏—è üìî\n'

        for lesson in schedule:
            title = lesson.get('lesson__title').replace('.', '\.').replace('-', '\-')

            date_of_lesson = lesson.get('date_of_lesson')

            date = dateformat.format(date_of_lesson, 'd E')
            time = dateformat.time_format(date_of_lesson, 'H:i')

            message += f'\n*{title}*: _{date} {time} –ú–°–ö_'

        update.message.reply_markdown_v2(message)

    @staticmethod
    def _homeworks_send(update: Update, context: CallbackContext):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
        """

        schedule_id = context.user_data.get('schedule_id')
        task_url = update.message.text

        if not schedule_id:
            update.message.reply_text('–ö–∞–∫ —Ç–∞–∫–æ–µ —Å–ª—É—á–∏–ª–æ—Å—å? –û—à–∏–±–∫–∞ üò¢')
            return ConversationHandler.END

        user = User.objects.get(telegram_id=update.message.chat_id)
        result = StudentService.send_student_homework(user, schedule_id, task_url)

        if result:
            update.message.reply_text(BotAnswer.objects.get(query='–†–∞–±–æ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞').text)

            schedule = Schedule.objects.get(id=schedule_id)

            if schedule.teacher.telegram_id:
                full_name = f'{user.first_name} {user.last_name}'
                classroom = schedule.classroom.title.replace('.', '\.').replace('-', '\-')
                lesson = schedule.lesson.title.replace('.', '\.').replace('-', '\-')

                message = f'–°—Ç—É–¥–µ–Ω—Ç *{full_name}* –∏–∑ –≥—Ä—É–ø–ø—ã *{classroom}* ' \
                          f'–æ—Ç–ø—Ä–∞–≤–∏–ª –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ —É—Ä–æ–∫—É *{lesson}* ü•∞'

                context.bot.send_message(
                    chat_id=schedule.teacher.telegram_id,
                    text=message,
                    parse_mode=ParseMode.MARKDOWN_V2)

            return ConversationHandler.END

        update.message.reply_text(BotAnswer.objects.get(query='–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞').text)
        return StudentHandler.HOMEWORK_URL

    @classmethod
    def messages(cls, update: Update, context: CallbackContext):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –Ω–∏–∂–Ω–µ–≥–æ –º–µ–Ω—é
        """

        if not User.objects.filter(telegram_id=update.message.chat_id).exists():
            update.message.reply_text(BotAnswer.objects.get(query='–ù–µ –ø–æ–Ω–∏–º–∞—é').text)
            return

        user = User.objects.get(telegram_id=update.message.chat_id)

        message = update.message.text

        if user.type.id_name == 'student':
            if message == '–ú–æ–∏ –∫—É—Ä—Å—ã üíº':
                cls._send_courses_list(update)
            elif message == '–°–¥–∞—Ç—å —Ä–∞–±–æ—Ç—É üéí':
                cls._send_homeworks_list(update)
            elif message == '–ë–ª–∏–∂–∞–π—à–∏–µ –∑–∞–Ω—è—Ç–∏—è üìî':
                cls._send_student_schedule(update)
            else:
                update.message.reply_text(BotAnswer.objects.get(query='–ù–µ –ø–æ–Ω–∏–º–∞—é').text)

    @classmethod
    def callbacks(cls, update: Update, context: CallbackContext):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        """

        button_press = update.callback_query

        if 'CoursesList' in button_press.data:
            try:
                button_press.message.delete()
            except telegram.TelegramError:
                pass
            finally:
                cls._send_courses_list(button_press)
        elif 'ModulesList' in button_press.data:
            try:
                button_press.message.delete()
            except telegram.TelegramError:
                pass
            finally:
                course_id = button_press.data.split(' ')[1]
                cls._send_modules_list(button_press, course_id)
        elif 'LessonsList' in button_press.data:
            try:
                button_press.message.delete()
            except telegram.TelegramError:
                pass
            finally:
                module_id = button_press.data.split(' ')[1]
                course_id = button_press.data.split(' ')[2]
                cls._send_lessons_list(button_press, module_id, course_id)
        elif 'LessonsView' in button_press.data:
            try:
                button_press.message.delete()
            except telegram.TelegramError:
                pass
            finally:
                schedule_id = button_press.data.split(' ')[1]
                back_location = button_press.data.split(' ')[2]
                cls._send_lessons_info(button_press, schedule_id, back_location)
        elif 'HomeworksList' in button_press.data:
            try:
                button_press.message.delete()
            except telegram.TelegramError:
                pass
            finally:
                cls._send_homeworks_list(button_press)
        elif 'HomeworksSend' in button_press.data:
            try:
                button_press.message.delete()
            except telegram.TelegramError:
                pass
            finally:
                schedule_id = button_press.data.split(' ')[1]
                context.user_data['schedule_id'] = schedule_id
                button_press.message.reply_text('–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É üìö')
                return StudentHandler.HOMEWORK_URL

    @classmethod
    def get_homework_handler(cls):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç homework_handler
        """

        homework_handler = ConversationHandler(
            entry_points=[CallbackQueryHandler(cls.callbacks, pattern='HomeworksSend')],
            states={
                StudentHandler.HOMEWORK_URL: [MessageHandler(Filters.text & ~Filters.command, cls._homeworks_send)],
            },
            fallbacks=[CommandHandler('cancel', LoginHandler.start)],
        )
        return homework_handler
