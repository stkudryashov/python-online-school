from accounts.models import User
from telegrambot.models import BotAnswer

from telegram import Update

from django.core.exceptions import ValidationError
from django.core.validators import validate_email

from telegrambot.keyboards import LOGIN_BUTTON
from telegrambot.services import get_user_keyboard

from telegram.ext import CallbackContext, ConversationHandler, CommandHandler, MessageHandler, Filters


class LoginHandler:
    """
    –ö–ª–∞—Å—Å —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """

    START_LOGIN, USER_EMAIL = range(2)

    @staticmethod
    def start(update: Update, context: CallbackContext):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –≤—Ö–æ–¥–∞ –≤ –∞–∫–∫–∞—É–Ω—Ç –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        """

        if User.objects.filter(telegram_id=update.message.chat_id).exists():
            user = User.objects.get(telegram_id=update.message.chat_id)

            update.message.reply_text(
                '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç üñ•',
                reply_markup=get_user_keyboard(user)
            )

            return ConversationHandler.END

        update.message.reply_text(
            text=BotAnswer.objects.get(query='–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ').text,
            reply_markup=LOGIN_BUTTON
        )

        return LoginStates.START_LOGIN

    @staticmethod
    def _login(update: Update, context: CallbackContext):
        """
        –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É
        """

        if update.message.text != '–í–æ–π—Ç–∏ üè´':
            update.message.reply_text(
                '–î–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚¨áÔ∏è',
                reply_markup=LOGIN_BUTTON
            )

            return LoginHandler.START_LOGIN

        update.message.reply_text(BotAnswer.objects.get(query='–ó–∞–ø—Ä–æ—Å –ø–æ—á—Ç—ã').text)
        return LoginHandler.USER_EMAIL

    @staticmethod
    def _email(update: Update, context: CallbackContext):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–æ—á—Ç—ã, –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç telegram_id
        """

        user_email = update.message.text

        try:
            validate_email(user_email)

            if not User.objects.filter(email=user_email, telegram_id__isnull=True).exists():
                update.message.reply_text(BotAnswer.objects.get(query='–ü–æ—á—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞').text)
                return LoginHandler.USER_EMAIL

            user = User.objects.get(email=user_email)

            user.telegram_id = update.message.chat_id
            user.save()

            update.message.reply_text(
                f'–î–æ–±—Ä—ã–π –¥–µ–Ω—å, {user.first_name}!',
                reply_markup=get_user_keyboard(user)
            )

            return ConversationHandler.END
        except ValidationError:
            update.message.reply_text(BotAnswer.objects.get(query='–û—à–∏–±–∫–∞ –ø–æ—á—Ç—ã').text)
            return LoginHandler.USER_EMAIL

    @classmethod
    def get_login_handler(cls):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç login_handler
        """

        login_handler = ConversationHandler(
            entry_points=[CommandHandler('start', cls.start)],
            states={
                LoginHandler.START_LOGIN: [MessageHandler(Filters.text, cls._login)],
                LoginHandler.USER_EMAIL: [MessageHandler(Filters.text & ~Filters.command, cls._email)],
            },
            fallbacks=[CommandHandler('cancel', cls.start)],
        )
        return login_handler
