from telegram import InlineKeyboardButton, InlineKeyboardMarkup

from telegram.ext import (
    CallbackContext, Updater,
    MessageHandler, CallbackQueryHandler,
    Filters)

from accounts.models import User
from classrooms.models import Schedule
from telegrambot.models import BotAnswer

from classrooms.services import TeacherService, ClassroomService

from telegram import Update

from django.utils import dateformat

import telegram


class TeacherHandler:
    """
    –ö–ª–∞—Å—Å —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —É—á–∏—Ç–µ–ª—è
    """

    @staticmethod
    def _send_classrooms_list(update: Update.callback_query):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é –≥—Ä—É–ø–ø—ã –≤ –∫–æ—Ç–æ—Ä—ã—Ö —É –Ω–µ–≥–æ –µ—Å—Ç—å –∑–∞–Ω—è—Ç–∏—è
        """

        user = User.objects.get(telegram_id=update.message.chat_id)
        user_classrooms = TeacherService.get_teacher_classrooms(user)

        if not user_classrooms:
            update.message.reply_text('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä—É–ø–ø üò¢')
            return

        reply_markup = InlineKeyboardMarkup.from_column(
            [InlineKeyboardButton(
                classroom.get('title'), callback_data=f"TeacherClassroom {classroom.get('id')}"
            ) for classroom in user_classrooms]
        )

        update.message.reply_text('–°–ø–∏—Å–æ–∫ —Ç–≤–æ–∏—Ö –≥—Ä—É–ø–ø üë©‚Äçüé®', reply_markup=reply_markup)

    @staticmethod
    def _send_teacher_lessons(update: Update.callback_query, classroom_id):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é –µ–≥–æ –∑–∞–Ω—è—Ç–∏—è –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ
        """

        user = User.objects.get(telegram_id=update.message.chat_id)
        user_lessons = TeacherService.get_teacher_lessons(user, classroom_id)

        reply_markup = InlineKeyboardMarkup.from_column(
            [InlineKeyboardButton(
                lesson.get('lesson__title'), callback_data=f"TeacherLesson {classroom_id} {lesson.get('id')}"
            ) for lesson in user_lessons] + [InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚è™', callback_data='ClassroomsList')]
        )

        update.message.reply_text('–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è üíª', reply_markup=reply_markup)

    @staticmethod
    def _send_lesson_info(update: Update.callback_query, classroom_id, schedule_id):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∑–∞–Ω—è—Ç–∏–∏
        """

        schedule = Schedule.objects.get(id=schedule_id)

        title = schedule.lesson.title.replace('.', '\.').replace('-', '\-')
        date = dateformat.format(schedule.date_of_lesson, 'd E')
        time = dateformat.time_format(schedule.date_of_lesson, 'H:i')

        hw_all = schedule.classroom.studentclassroom_set.all().count()
        hw_waiting = schedule.homeworks.all().count()
        hw_accepted = schedule.homeworks.filter(is_accepted=True).count()

        message = f"*–£—Ä–æ–∫:* _{title}_\n" \
                  f"*–î–∞—Ç–∞ —É—Ä–æ–∫–∞:* _{date} {time} –ú–°–ö_\n\n" \
                  f"*–û—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ä–∞–±–æ—Ç—ã:* _{hw_waiting} / {hw_all}\n_" \
                  f"*–ü–æ–ª—É—á–∏–ª–∏ –∑–∞—á–µ—Ç:* _{hw_accepted}_"

        back_button = [InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚è™', callback_data=f'TeacherClassroom {classroom_id}')]
        reply_markup = InlineKeyboardMarkup.from_column(back_button)

        update.message.reply_markdown_v2(message, reply_markup=reply_markup)

    @staticmethod
    def _send_teacher_schedule(update: Update):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É—á–∏—Ç–µ–ª—é –µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        """

        user = User.objects.get(telegram_id=update.message.chat_id)
        schedule = ClassroomService.get_user_schedule(user, 7)

        if not schedule:
            update.message.reply_text('–ë–ª–∏–∂–∞–π—à–∏—Ö –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç ü•∞')
            return

        message = '–ë–ª–∏–∂–∞–π—à–∏–µ –∑–∞–Ω—è—Ç–∏—è üìî\n'

        for lesson in schedule:
            title = lesson.get('lesson__title').replace('.', '\.').replace('-', '\-')

            date_of_lesson = lesson.get('date_of_lesson')

            date = dateformat.format(date_of_lesson, 'd E')
            time = dateformat.time_format(date_of_lesson, 'H:i')

            classroom = lesson.get('classroom__title').replace('.', '\.').replace('-', '\-')

            message += f'\n*{classroom}* \- *{title}*: _{date} {time} –ú–°–ö_'

        update.message.reply_markdown_v2(message)

    @classmethod
    def messages(cls, update: Update, context: CallbackContext):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –Ω–∏–∂–Ω–µ–≥–æ –º–µ–Ω—é
        """

        user = User.objects.get(telegram_id=update.message.chat_id)
        message = update.message.text

        if user.type.id_name == 'teacher':
            if message == '–ú–æ–∏ —Å—Ç—É–¥–µ–Ω—Ç—ã üßëüèº‚Äçüéì':
                cls._send_classrooms_list(update)
            elif message == '–ú–æ–∏ –∑–∞–Ω—è—Ç–∏—è üìÜ':
                cls._send_teacher_schedule(update)
            else:
                update.message.reply_text(BotAnswer.objects.get(query='–ù–µ –ø–æ–Ω–∏–º–∞—é').text)

    @classmethod
    def callbacks(cls, update: Update, context: CallbackContext):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        """

        button_press = update.callback_query

        if 'ClassroomsList' in button_press.data:
            try:
                button_press.message.delete()
            except telegram.TelegramError:
                pass
            finally:
                cls._send_classrooms_list(button_press)
        elif 'TeacherClassroom' in button_press.data:
            try:
                button_press.message.delete()
            except telegram.TelegramError:
                pass
            finally:
                classroom_id = button_press.data.split(' ')[1]
                cls._send_teacher_lessons(button_press, classroom_id)
        elif 'TeacherLesson' in button_press.data:
            try:
                button_press.message.delete()
            except telegram.TelegramError:
                pass
            finally:
                classroom_id = button_press.data.split(' ')[1]
                schedule_id = button_press.data.split(' ')[2]
                cls._send_lesson_info(button_press, classroom_id, schedule_id)
